#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


#====================================================================================================================================================#
#<use>
$|++; #---turn on the auto flush for the progress bar
no warnings 'utf8';
use warnings;
use strict;
use File::Path;
use File::Copy;
use File::Basename;
use File::Spec::Functions qw(rel2abs abs2rel);
use Time::HiRes qw( time );
use Getopt::Long 'HelpMessage';
use List::Util qw (sum shuffle min max);
use Cwd 'abs_path';
#<\use>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<doc>
=head1 SYNOPSIS

           5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~AAA-3'
                        O~~~AA      O~~         O~       O~~~~~~~AO~~~~~~~~A
                      O~~    O~~ O~~   O~~     O~O~~     O~~      O~~       
                       O~~      O~~           O~  O~~    O~~      O~~       
                         O~~    O~~          O~~   O~~   O~~~~~AA O~~~~~~A  
                            O~~ O~~         O~~~~~A O~~  O~~      O~~       
                      O~~    O~~ O~~   O~~ O~~       O~~ O~~      O~~       
                        O~~~~A     O~~~   O~~         O~~O~~      O~~~~~~~AA
       ┌─ᐅ 5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-3'
 ...===┴========================================================================================...

                      Single Cell Analysis of Five-prime End (SCAFE) Tool Suite 
                                   ---> scafe.tool.bk.count <---
                      <--- tool, bulk mode, count ctss within tCREs --->

 Description:
   This tool counts the CAGE reads within a set of user-defined regions, e.g. tCRE, and 
   returns the reads per regions

 Usage:
   scafe.tool.bk.count [options] --countRegion_bed_path --ctss_bed_path --outputPrefix --outDir
   
   --countRegion_bed_path   <required> [string] bed file contains the regions for counting CTSS, e.g. tCRE ranges, 
                                                *.CRE.coord.bed.gz from scafe.tool.cm.annotate
   --ctss_bed_path          <required> [string] ctss file for counting,
                                                *collapse.ctss.bed.gz from scafe.tool.bk.bam_to_ctss, 
                                                5th column is number of read
   --genome                 <required> [string] name of genome reference, e.g. hg19.gencode_v32lift37
   --ctss_scope_bed_path    <optional> [string] bed file contains the regions for filtering CTSS, e.g. tssCluster ranges, 
                                                so only the ctss within these ranges (i.e. scope) will be count. This is to 
                                                prevent over permissive counting to ctss in the CRE range by stricting only 
                                                ctss within valid tssClusters to be counted. 
                                                *.tssCluster.default.filtered.bed.gz from scafe.tool.cm.filter.
                                                It will skip filtering if not file was provide (default=null).
   --ctss_scope_slop_bp    <optional> [integer] the length of the boundary extension (in bp) for filter region provided in
                                                option ctss_scope_bed_path. All regions in ctss_scope_bed_path will be 
                                                extended both side by ctss_scope_slop_bp, for controlling the permissiveness
                                                of the counting. A large value of ctss_scope_slop_bp (e.g. 400) will be 
                                                equivalent to no filtering (default=0).
   --outputPrefix           <required> [string] prefix for the output files
   --outDir                 <required> [string] directory for the output files
   --overwrite              (optional) [yes/no] erase outDir/outputPrefix before running (default=no)

 Dependencies:
   bedtools

 For demo, cd to SCAFE dir and run,
   scafe.tool.bk.count \
   --overwrite=yes \
   --genome=hg19.gencode_v32lift37 \
   --countRegion_bed_path=./demo/output/bk.solo/annotate/demo/bed/demo.CRE.annot.bed.gz \
   --ctss_bed_path=./demo/output/bk.solo/bam_to_ctss/demo/bed/demo.collapse.ctss.bed.gz \
   --outputPrefix=demo \
   --outDir=./demo/output/bk.solo/count/

=head1 VERSION

v0.9.0-beta [March 20, 2021]
	-Initial pre-release

v1.0.0 [June 6, 2022]
	-No major update

v1.0.1 [June 26, 2022]
	-Implemented region filter, will only count the ctss within the region filter, used for counting tssCluster only instead of the whole CRE

=cut
#<\doc>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<lastCmdCalled>
#
#	notCalledBefore
#
#	notCalledBefore
#
#<\lastCmdCalled>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<global>
my $scriptDirPath = dirname(rel2abs($0));
my $scriptAbsPath = abs_path($0);
my ($curntTimeStamp) = &timeStamp();#->694
my $ARGVStr = join "\n", (&currentTime(), $scriptAbsPath, @ARGV);#->304
my $globalReadmeHsh_ref = {};
our $tmplog_fh;
#<\global>
#====================================================================================================================================================#

#====================================================================================================================================================#
{	#Main sections lexical scope starts
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 0_startingTasks
#
#<section ID="startingTasks" num="0">
my ($countRegion_bed_path, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();#->563
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 1_defineHardCodedParam
#
#<section ID="defineHardCodedParam" num="1">
my $paramTag = "$outputPrefix";
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 2_defineOutDirPath
#
#<section ID="defineOutDirPath" num="2">
my @mkDirAry;
my $result_dir = "$outDir/$paramTag/"; push @mkDirAry, $result_dir;
system "rm -rf $result_dir" if ($overwrite eq 'yes');
my $result_log_dir = "$result_dir/log/"; push @mkDirAry, $result_log_dir;
my $result_script_dir = "$result_dir/script/"; push @mkDirAry, $result_script_dir;
foreach my $dir (@mkDirAry) {system ("mkdir -pm 777 $dir");}
open $tmplog_fh, ">", "$result_dir/00_screen_log.$curntTimeStamp.log.txt";
&logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);#->322
&printStartOrFinishMessage("startMessage");#->490
my ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();#->202
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 3_output
#
#<section ID="output" num="3">
my ($countRegion_info_hsh_ref) = &readCountRegionInfo($countRegion_bed_path);#->524
my $num_CRE = keys %{$countRegion_info_hsh_ref};
my ($chrom_size_path) = &checkChromSizePath($genome);#->282
&runBedToolsIntersect($countRegion_bed_path, $ctss_bed_path, $countRegion_info_hsh_ref, $bedtools_bin, $ctss_scope_bed_path, $ctss_scope_slop_bp, $chrom_size_path);#->634
&printCount($countRegion_info_hsh_ref, $result_log_dir);#->347
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 4_finishingTasks
#
#<section ID="finishingTasks" num="4">
&printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);#->375
&printStartOrFinishMessage("finishMessage");#->490
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
}	#Main sections lexical scope ends
#====================================================================================================================================================#

#====================================================================================================================================================#
#List of subroutines by category
#
#	general [n=5]:
#		currentTime, logCalledCMDAndScript, printStartOrFinishMessage
#		readParameters, timeStamp
#
#	log [n=1]:
#		reportAndLogStatus
#
#	output [n=1]:
#		printOutputFileListAndReadme
#
#	range [n=1]:
#		runBedToolsIntersect
#
#	time [n=1]:
#		timeStamp
#
#	unassigned [n=4]:
#		checkAllExecutable, checkChromSizePath, printCount
#		readCountRegionInfo
#
#====================================================================================================================================================#

sub checkAllExecutable {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|612
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|136
#	secondaryAppearInSection: >none
#	input: none
#	output: $bedGraphToBigWig_bin, $bedtools_bin, $bigWigAverageOverBed_bin, $cut_sh_path, $paraclu_bin, $samtools_bin
#	toCall: my ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();
#	calledInLine: 148
#....................................................................................................................................................#
	
	my $dirPath = dirname(rel2abs($0));

	my $bedtools_bin = "$dirPath/../resources/bin/bedtools/bedtools";
	my $samtools_bin = "$dirPath/../resources/bin/samtools/samtools";
	my $paraclu_bin = "$dirPath/../resources/bin/paraclu/paraclu";
	my $cut_sh_path = "$dirPath/../resources/bin/paraclu/paraclu-cut.sh";
	my $bedGraphToBigWig_bin = "$dirPath/../resources/bin/bedGraphToBigWig/bedGraphToBigWig";
	my $bigWigAverageOverBed_bin = "$dirPath/../resources/bin/bigWigAverageOverBed/bigWigAverageOverBed";
	
	&reportAndLogStatus("Checking all SCAFE executables", 10, "\n");#->612
	
	{
		my $stdOut = `$bedtools_bin --version 2>&1`;
		if ($stdOut =~ m/bedtools v(\S+)/) {
			&reportAndLogStatus("Checking: bedtools version: $1", 0, "\n");#->612
		} else {
			die "bedtools is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$samtools_bin 2>&1`;
		if ($stdOut =~ m/\s+(Version: \S+)\s+/) {
			&reportAndLogStatus("Checking: samtools version: $1", 0, "\n");#->612
		} else {
			die "samtools is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$paraclu_bin 2>&1`;
		if ($stdOut =~ m/paraclu: I need a minValue and a fileName/) {
			&reportAndLogStatus("Checking: paraclu found.", 0, "\n");#->612
		} else {
			die "paraclu is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$cut_sh_path 55C7128A 2>&1`;
		if ($stdOut =~ m/awk:/) {
			&reportAndLogStatus("Checking: paraclu-cut found.", 0, "\n");#->612
		} else {
			die "paraclu-cut is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bedGraphToBigWig_bin 2>&1`;
		if ($stdOut =~ m/bedGraphToBigWig v (\S+)/) {
			&reportAndLogStatus("Checking: bedGraphToBigWig version: $1", 0, "\n");#->612
		} else {
			die "bedGraphToBigWig not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bigWigAverageOverBed_bin 2>&1`;
		if ($stdOut =~ m/bigWigAverageOverBed v(\S+)/) {
			&reportAndLogStatus("Checking: bigWigAverageOverBed version: $1", 0, "\n");#->612
		} else {
			die "bigWigAverageOverBed is not installed properly. Quitting.\n";
		}
	}

	return ($bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin);
}
sub checkChromSizePath {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_output|153
#	secondaryAppearInSection: >none
#	input: $genome
#	output: $chrom_size_path
#	toCall: my ($chrom_size_path) = &checkChromSizePath($genome);
#	calledInLine: 157
#....................................................................................................................................................#
	my ($genome) = @_;

	#$chrom_size_path, $gene_info_path, $transcript_bed_path, $transcript_info_path,

	my $dirPath = dirname(rel2abs($0));
	my $chrom_size_path = "$dirPath/../resources/genome/$genome/tsv/chrom.sizes.tsv";
	die "genome $genome does not have chrom_size_path. Please rerun prep_genome step\n" if not -s $chrom_size_path;

	return ($chrom_size_path);
}
sub currentTime {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: printStartOrFinishMessage|490, reportAndLogStatus|612
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|136, 4_finishingTasks|164
#	input: none
#	output: $runTime
#	toCall: my ($runTime) = &currentTime();
#	calledInLine: 109, 506, 510, 515, 519, 628, 629
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $runTime = sprintf "%04d-%02d-%02d %02d:%02d", $year+1900, $mon+1,$mday,$hour,$min;	
	
	return $runTime;
}
sub logCalledCMDAndScript {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|136
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $result_script_dir, $scriptAbsPath
#	output: 
#	toCall: &logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);
#	calledInLine: 146
#....................................................................................................................................................#
	my ($ARGVStr, $result_script_dir, $scriptAbsPath) = @_;


	my $cpScriptPath = "$result_script_dir/script.ran.pl";
	my $calledCMDPath = "$result_script_dir/called.cmd.txt";
	system "cp -f $scriptAbsPath $cpScriptPath";
	system "chmod 0444 $cpScriptPath"; #---[07/03/2014 18:02] make it read-only to make sure there'll be accodental change of parameters
	open CALLEDCMD, ">", $calledCMDPath;
	print CALLEDCMD join "", ($ARGVStr), "\n";
	close CALLEDCMD;
	
	return ();
}
sub printCount {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|612
#	appearInSub: >none
#	primaryAppearInSection: 3_output|153
#	secondaryAppearInSection: >none
#	input: $countRegion_info_hsh_ref, $result_log_dir
#	output: 
#	toCall: &printCount($countRegion_info_hsh_ref, $result_log_dir);
#	calledInLine: 159
#....................................................................................................................................................#
	my ($countRegion_info_hsh_ref, $result_log_dir) = @_;
	
	&reportAndLogStatus("printing count", 0, "\n");#->612
	my $count_path = "$result_log_dir/count.log.tsv";
	open (COUNTLOG, ">", "$count_path");
	$globalReadmeHsh_ref->{$count_path}{'description'} = "tsv file contains read counts of each CRE";

	print COUNTLOG join "", ((join "\t", ('countRegion_ID', 'count')), "\n");
	foreach my $countRegion_ID (sort keys %{$countRegion_info_hsh_ref})	{
		my $count = $countRegion_info_hsh_ref->{$countRegion_ID}{'count'};
		print COUNTLOG join "", ((join "\t", ($countRegion_ID, $count)), "\n");
	}
	close COUNTLOG;
	
	return ();
}
sub printOutputFileListAndReadme {
#....................................................................................................................................................#
#	subroutineCategory: output
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 4_finishingTasks|164
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $outDir, $paramTag
#	output: 
#	toCall: &printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);
#	calledInLine: 167
#....................................................................................................................................................#
	my ($ARGVStr, $paramTag, $outDir) = @_;
	
	my $outputFileListPath = "$outDir/$paramTag/output.file.list.txt";
	open (OUTFILELIST, ">", $outputFileListPath);

	my %dirHsh = ();
	my %filelistLenCountHsh = ();
	push @{$filelistLenCountHsh{'dir'}}, length 'Directory';
	push @{$filelistLenCountHsh{'name'}}, length 'Name';
	push @{$filelistLenCountHsh{'description'}}, length 'Description';
	
	foreach my $outputFilePath (sort {$a cmp $b} keys %{$globalReadmeHsh_ref}) {
		my $fileDescription =  $globalReadmeHsh_ref->{$outputFilePath}{'description'};
		my $cleandOutputFilePath = $outputFilePath;
		$cleandOutputFilePath =~ s/\/+/\//g;
		
		my ($filePrefix, $fileDir, $fileSuffix) = fileparse($cleandOutputFilePath, qr/\.[^.]*/);
		$fileDir =~ s/^$outDir//;
		my $fileName = $filePrefix.$fileSuffix;
		$dirHsh{$fileDir}{$fileName} = $fileDescription;
		push @{$filelistLenCountHsh{'dir'}}, length $fileDir;
		push @{$filelistLenCountHsh{'name'}}, length $fileName;
		push @{$filelistLenCountHsh{'description'}}, length $fileDescription;
		
		open README, ">", "$outputFilePath.readme.txt";
		print README "=================\n";
		print README "File descriptions\n";
		print README "=================\n";
		print README "$fileDescription\n";
					
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}) {
			my @colLenCountHsh = (length 'column');
			push @colLenCountHsh, length $_ foreach (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}});
			my $headerColLen = max(@colLenCountHsh)+2;
			print README "\n";
			print README "\n";
			print README "===================\n";
			print README "Column descriptions\n";
			print README "===================\n";
			print README "\n";
			printf README "%-".$headerColLen."s", 'column';
			print README "description\n";
			printf README "%-".$headerColLen."s", '------';
			print README "-----------\n";
			foreach my $header (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}}) {
				my $columnDescription = 'self-explanatory';
				$columnDescription = $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header} if exists $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header};
				printf README "%-".$headerColLen."s", $header;
				print README $columnDescription."\n";
			}
		}
		
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}) {
			print README "\n";
			print README "\n";
			print README "=================\n";
			print README "Extra information\n";
			print README "=================\n";
			print README "\n";
			foreach my $title (sort keys %{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}}) {
				print README "$title\n";
				print README "-" foreach (1..length $title);
				print README "\n";
				print README "$_\n" foreach @{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}{$title}};
			}
		}
		
		print README "\n";
		print README "\n";
		print README "~" foreach (1..length "$fileName was created from running,");
		print README "\n";
		print README "$fileName was created from running,\n";
		print README "\n";
		print README "$ARGVStr\n";
		print README "\n";
		close README;
	}

	my $fileDir_colLen = max(@{$filelistLenCountHsh{'dir'}})+2;
	my $fileName_colLen = max(@{$filelistLenCountHsh{'name'}})+2;
	my $fileDescription_colLen = max(@{$filelistLenCountHsh{'description'}})+2;
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", 'directory', 'name', 'description');
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", '=========', '====', '===========');
	foreach my $fileDir (sort {$a cmp $b} keys %dirHsh) {
		foreach my $fileName (sort {$a cmp $b} keys %{$dirHsh{$fileDir}}) {
			my $fileDescription = $dirHsh{$fileDir}{$fileName};	
			printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", $fileDir, $fileName, $fileDescription);
		}
	}
	
	print OUTFILELIST "\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "~" foreach (1..length "The above files were generated by running,");
	print OUTFILELIST "\n";
	print OUTFILELIST "The above files were generated by running,\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "$ARGVStr\n";
	print OUTFILELIST "\n";

	close OUTFILELIST;

	return ();
}
sub printStartOrFinishMessage {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: currentTime|304
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|136, 4_finishingTasks|164
#	secondaryAppearInSection: >none
#	input: $StartOrFinishMessage
#	output: none
#	toCall: &printStartOrFinishMessage($StartOrFinishMessage);
#	calledInLine: 147, 168
#....................................................................................................................................................#

	my ($StartOrFinishMessage) = @_;
	
	if ($StartOrFinishMessage eq "startMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] starts running ...... \n";#->304
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] starts running ...... \n";#->304
		print $tmplog_fh "=========================================================================\n\n";

	} elsif ($StartOrFinishMessage eq "finishMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] finished running .......\n";#->304
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] finished running .......\n";#->304
		print $tmplog_fh "=========================================================================\n\n";
	}
}
sub readCountRegionInfo {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|612
#	appearInSub: >none
#	primaryAppearInSection: 3_output|153
#	secondaryAppearInSection: >none
#	input: $countRegion_bed_path
#	output: $countRegion_info_hsh_ref
#	toCall: my ($countRegion_info_hsh_ref) = &readCountRegionInfo($countRegion_bed_path);
#	calledInLine: 156
#....................................................................................................................................................#
	my ($countRegion_bed_path) = @_;
	
	my $countRegion_info_hsh_ref = {};

	&reportAndLogStatus("reading count region info", 0, "\n");#->612
	if ($countRegion_bed_path =~ m/\.gz$/) {
		open (COUNTREGION, " gzip -dc $countRegion_bed_path |");
	} else {
		open (COUNTREGION, "<", $countRegion_bed_path);
	}
	my $countRegion_index = 1;
	while (<COUNTREGION>) {
		chomp;
		my ($chrom, $chromStart, $chromEnd, $countRegion_ID) = split /\t/;
		my $countRegion_name = $countRegion_ID;
		die "$countRegion_ID is duplicated\n" if exists $countRegion_info_hsh_ref->{$countRegion_ID};

		$countRegion_info_hsh_ref->{$countRegion_ID}{'count'} = 0;
		$countRegion_index++;
	}
	close COUNTREGION;
	
	my $num_countRegion = keys %{$countRegion_info_hsh_ref};
	&reportAndLogStatus("info of $num_countRegion countRegion stored", 0, "\n");#->612
		
	return ($countRegion_info_hsh_ref);
}
sub readParameters {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 0_startingTasks|120
#	secondaryAppearInSection: >none
#	input: none
#	output: $countRegion_bed_path, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp, $genome, $outDir, $outputPrefix, $overwrite
#	toCall: my ($countRegion_bed_path, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();
#	calledInLine: 123
#....................................................................................................................................................#
	
	my ($countRegion_bed_path, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp, $genome, $outputPrefix, $outDir, $overwrite);
	
	$overwrite = 'no';
	$ctss_scope_slop_bp = 0;
	$ctss_scope_bed_path = undef;
	
	GetOptions 	(
		"countRegion_bed_path=s"	=>	\$countRegion_bed_path,
		"ctss_bed_path=s"				=>	\$ctss_bed_path,
		"ctss_scope_bed_path:s"		=>	\$ctss_scope_bed_path,
		"ctss_scope_slop_bp:s"		=>	\$ctss_scope_slop_bp,
		"genome:s"						=>	\$genome,
		"outputPrefix=s"				=>	\$outputPrefix,
		"outDir:s"						=>	\$outDir,
		"overwrite:s"					=>	\$overwrite,
		'help'							=>	sub { HelpMessage(0) },
	) or HelpMessage(1);

	HelpMessage(1) unless $countRegion_bed_path;
	
	#---check file
	my $file_check_hsh_ref = {
		'countRegion_bed_path' => $countRegion_bed_path,
		'ctss_bed_path' => $ctss_bed_path,
	};
	
	foreach my $option_name (keys %{$file_check_hsh_ref}) {
		my $file_path = $file_check_hsh_ref->{$option_name};
		die "Quitting: File $option_name does not exists at $file_path" if not -s $file_path;
	}
	
	chop $outDir if ($outDir =~ m/\/$/); #---remove the last slash
	system "mkdir -p -m 744 $outDir/";
	
	return($countRegion_bed_path, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp, $genome, $outputPrefix, $outDir, $overwrite);
}
sub reportAndLogStatus {
#....................................................................................................................................................#
#	subroutineCategory: log
#	dependOnSub: currentTime|304
#	appearInSub: checkAllExecutable|202, printCount|347, readCountRegionInfo|524, runBedToolsIntersect|634
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|136, 3_output|153
#	input: $lineEnd, $message, $numTrailingSpace
#	output: 
#	toCall: &reportAndLogStatus($message, $numTrailingSpace, $lineEnd);
#	calledInLine: 223, 228, 237, 246, 255, 264, 273, 360, 539, 558, 648, 659, 662, 666
#....................................................................................................................................................#
	my ($message, $numTrailingSpace, $lineEnd) = @_;

	my $trailingSpaces = '';
	$trailingSpaces .= " " for (1..$numTrailingSpace);
	
	print "[".&currentTime()."] ".$message.$trailingSpaces.$lineEnd;#->304
	print $tmplog_fh "[".&currentTime()."] ".$message.$lineEnd if $lineEnd ne "\r";#->304
	
	return ();
}
sub runBedToolsIntersect {
#....................................................................................................................................................#
#	subroutineCategory: range
#	dependOnSub: reportAndLogStatus|612
#	appearInSub: >none
#	primaryAppearInSection: 3_output|153
#	secondaryAppearInSection: >none
#	input: $bedtools_bin, $chrom_size_path, $countRegion_bed_path, $countRegion_info_hsh_ref, $ctss_bed_path, $ctss_scope_bed_path, $ctss_scope_slop_bp
#	output: 
#	toCall: &runBedToolsIntersect($countRegion_bed_path, $ctss_bed_path, $countRegion_info_hsh_ref, $bedtools_bin, $ctss_scope_bed_path, $ctss_scope_slop_bp, $chrom_size_path);
#	calledInLine: 158
#....................................................................................................................................................#

	my ($countRegion_bed_path, $ctss_bed_path, $countRegion_info_hsh_ref, $bedtools_bin, $ctss_scope_bed_path, $ctss_scope_slop_bp, $chrom_size_path) = @_;

	&reportAndLogStatus("Start running bedtools intersect. Be patient.", 10, "\n");#->612
		
	if ($countRegion_bed_path =~ m/\.gz$/) {
		#---[2/18/15 19:54] sometimes will crash on ac2 if read gz directly
		open BEDTOOLS, "gzip -dc $countRegion_bed_path | cut -f 1-6 | $bedtools_bin intersect -sorted -wo -a stdin -b $ctss_bed_path |";
	} else {
		open BEDTOOLS, "cut -f 1-6 $countRegion_bed_path | $bedtools_bin intersect -sorted -wo -a stdin -b $ctss_bed_path |";
	}

	if (defined $ctss_scope_bed_path) {
		if ($ctss_scope_slop_bp > 0) {
			&reportAndLogStatus("Start running bedtools intersect with ctss scope and slop distance $ctss_scope_slop_bp. Be patient.", 10, "\n");#->612
			open BEDTOOLS, "$bedtools_bin slop -b $ctss_scope_slop_bp -g $chrom_size_path -i $ctss_scope_bed_path | cut -f 1-6 | $bedtools_bin intersect -sorted -s -u -a $ctss_bed_path -b stdin | $bedtools_bin intersect -sorted -wo -a $countRegion_bed_path -b stdin |";
		} else {
			&reportAndLogStatus("Start running bedtools intersect with ctss scope. Be patient.", 10, "\n");#->612
			open BEDTOOLS, "$bedtools_bin intersect -sorted -s -u -a $ctss_bed_path -b $ctss_scope_bed_path | $bedtools_bin intersect -sorted -wo -a $countRegion_bed_path -b stdin |";
		}
	} else {
		&reportAndLogStatus("Start running bedtools intersect without ctss scope. Be patient.", 10, "\n");#->612
		open BEDTOOLS, "$bedtools_bin intersect -sorted -wo -a $countRegion_bed_path -b $ctss_bed_path |";
	}

	while (<BEDTOOLS>) {
		chomp;
		#chr1	19485502	19485554	p1@CAPZB	639956	-	chr1	19485525	19485526	TGCGCAGAGGCACATG-1	2	-	1
		my @splt = split /\t/;

		my $chrom = $splt[0];
		my $countRegion_start = $splt[1];
		my $countRegion_end = $splt[2];
		my $countRegion_ID = $splt[3];
		my $countRegion_strand = $splt[5];
		my $CTSS_strand = $splt[-2];
		my $count = $splt[-3];
		#my ($chrom, $countRegion_start, $countRegion_end, $countRegion_ID, undef, $countRegion_strand, undef, undef, undef, undef, $count, $CTSS_strand) = split /\t/;
		
		if (($countRegion_strand eq '.' or $countRegion_strand eq $CTSS_strand) and (exists $countRegion_info_hsh_ref->{$countRegion_ID})) {
			$countRegion_info_hsh_ref->{$countRegion_ID}{'count'} += $count;
		}
	}

	close BEDTOOLS;
	
	return ();
}
sub timeStamp {
#....................................................................................................................................................#
#	subroutineCategory: time, general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: >none
#	secondaryAppearInSection: >none
#	input: none
#	output: $curntTimeStamp
#	toCall: my ($curntTimeStamp) = &timeStamp();
#	calledInLine: 108
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $curntTimeStamp = sprintf "%04d.%02d.%02d.%02d.%02d.%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;	

	return ($curntTimeStamp);
}

exit;


















































