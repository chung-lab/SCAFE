#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


#====================================================================================================================================================#
#<use>
$|++; #---turn on the auto flush for the progress bar
no warnings 'utf8';
use warnings;
use strict;
use File::Path;
use File::Copy;
use File::Basename;
use File::Spec::Functions qw(rel2abs abs2rel);
use Time::HiRes qw( time );
use Getopt::Long 'HelpMessage';
use threads ('stack_size' => 64*4096);
use threads::shared;
use List::Util qw (sum shuffle min max);
use Cwd 'abs_path';
use AutoLoader qw/AUTOLOAD/;
#<\use>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<doc>
=head1 SYNOPSIS

           5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~AAA-3'
                        O~~~AA      O~~         O~       O~~~~~~~AO~~~~~~~~A
                      O~~    O~~ O~~   O~~     O~O~~     O~~      O~~       
                       O~~      O~~           O~  O~~    O~~      O~~       
                         O~~    O~~          O~~   O~~   O~~~~~AA O~~~~~~A  
                            O~~ O~~         O~~~~~A O~~  O~~      O~~       
                      O~~    O~~ O~~   O~~ O~~       O~~ O~~      O~~       
                        O~~~~A     O~~~   O~~         O~~O~~      O~~~~~~~AA
       ┌─ᐅ 5'-O~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~-3'
 ...===┴========================================================================================...

                      Single Cell Analysis of Five-prime End (SCAFE) Tool Suite 
                                ---> scafe.tool.bk.bam_to_ctss <---
                       <--- tool, bulk mode, convert bam to ctss bed --->

 Description:
   This tool converts a bulk CAGE bam file to a ctss bed file, identifies read 5'end 
   (capped TSS, i.e. ctss), extracts the unencoded G information, pileup ctss, 
   and deduplicate the UMI

 Usage:
   scafe.tool.bk.bam_to_ctss [options] --bamPath --genome --outputPrefix --outDir
   
   --bamPath      <required> [string]  bam file (of CAGE reads), can be read 1 only or pair-end
   --genome       <required> [string]  name of genome reference, e.g. hg19.gencode_v32lift37
   --outputPrefix <required> [string]  prefix for the output files
   --outDir       <required> [string]  directory for the output files
   --include_flag (optional) [string]  samflag to be included, comma delimited 
                                       e.g. '64' to include read1, (default=null)
   --exclude_flag (optional) [string]  samflag to be excluded, comma delimited, 
                                       e.g. '128,256,4' to exclude read2, secondary alignment 
                                       and unaligned reads (default=128,256,4)
   --min_MAPQ     (optional) [integer] minimum MAPQ to include (default=0)
   --max_thread   (optional) [integer] maximum number of parallel threads, capped at 10 to 
                                       avoid memory overflow (default=5)
   --overwrite    (optional) [yes/no]  erase outDir/outputPrefix before running (default=no)

 Dependencies:
   bedtools
   samtools
   tabix
   bgzip

 For demo, cd to SCAFE dir and run,
   scafe.tool.bk.bam_to_ctss \
   --overwrite=yes \
   --bamPath=./demo/input/bk.solo/demo.CAGE.bam \
   --genome=hg19.gencode_v32lift37 \
   --outputPrefix=demo \
   --outDir=./demo/output/bk.solo/bam_to_ctss/

=head1 VERSION

v0.9.0-beta [March 20, 2021]
	-Initial pre-release

v1.0.0 [June 6, 2022]
	-implemented minimum bam alignment CIGAR match as 30 bases

v1.0.1 [June 26, 2022]
	-Modified bamtobed command to accommodate long reads

=cut
#<\doc>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<lastCmdCalled>
#
#	notCalledBefore
#
#	notCalledBefore
#
#<\lastCmdCalled>
#====================================================================================================================================================#

#====================================================================================================================================================#
#<global>
my $scriptDirPath = dirname(rel2abs($0));
my $scriptAbsPath = abs_path($0);
my ($curntTimeStamp) = &timeStamp();#->1335
my $ARGVStr = join "\n", (&currentTime(), $scriptAbsPath, @ARGV);#->471
my $globalReadmeHsh_ref = {};
our $tmplog_fh;
#<\global>
#====================================================================================================================================================#

#====================================================================================================================================================#
{	#Main sections lexical scope starts
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 0_startingTasks
#
#<section ID="startingTasks" num="0">
my ($bamPath, $exclude_flag, $include_flag, $min_MAPQ, $max_thread, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();#->1262
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 1_defineHardCodedParam
#
#<section ID="defineHardCodedParam" num="1">
my $paramTag = "$outputPrefix";
my $rm_tmp_file = 'yes';
my $sanity_check_toggle = 'yes';
#my $sanity_check_toggle = 'no';
my $num_chunk = 100;
my $min_match_length = 5;
my $max_non_G_mismatch = 2;
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 2_defineOutDirPath
#
#<section ID="defineOutDirPath" num="2">
my @mkDirAry;
my $result_dir = "$outDir/$paramTag"; push @mkDirAry, $result_dir;
system "rm -rf $result_dir" if ($overwrite eq 'yes');
my $result_bed_dir = "$result_dir/bed/"; push @mkDirAry, $result_bed_dir;
my $result_log_dir = "$result_dir/log/"; push @mkDirAry, $result_log_dir;
my $result_script_dir = "$result_dir/script/"; push @mkDirAry, $result_script_dir;
my $result_tmp_dir = "$result_dir/tmp/"; push @mkDirAry, $result_tmp_dir;
foreach my $dir (@mkDirAry) {system ("mkdir -pm 777 $dir");}

open $tmplog_fh, ">", "$result_dir/00_screen_log.$curntTimeStamp.log.txt";
&logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);#->791
&printStartOrFinishMessage("startMessage");#->1134
my ($tabix_bin, $bgzip_bin, $bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();#->214
my ($chrom_name_path, $chrom_size_path, $genome_fasta_path) = &checkChromNameSizeGenomeFastaPath($genome);#->314
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 3_convert
#
#<section ID="convert" num="3">
my ($chrom_name_size_hsh_ref, $out_chrom_size_hsh_ref) = &generateChromNameConversionHsh($chrom_name_path, $chrom_size_path, $samtools_bin, $bamPath);#->489
my ($chunk_size) = &generateChunkSize($out_chrom_size_hsh_ref, $num_chunk);#->610
my ($chunk_info_hsh_ref) = &generateChunkInfoHsh($chrom_name_size_hsh_ref, $chunk_size, $result_tmp_dir);#->559
&processPerChunk($bamPath, $bedtools_bin, $samtools_bin, $max_thread, $chunk_info_hsh_ref, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $min_MAPQ, $genome_fasta_path, $out_chrom_size_hsh_ref, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch);#->1168
&poolChunkResults($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $max_thread, $tabix_bin, $bgzip_bin, $result_tmp_dir, $rm_tmp_file);#->896
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
#	section 4_finishingTasks
#
#<section ID="finishingTasks" num="4">
&printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);#->1019
&printStartOrFinishMessage("finishMessage");#->1134
#<\section>
#====================================================================================================================================================#

#====================================================================================================================================================#
}	#Main sections lexical scope ends
#====================================================================================================================================================#

#====================================================================================================================================================#
#List of subroutines by category
#
#	general [n=5]:
#		currentTime, logCalledCMDAndScript, printStartOrFinishMessage
#		readParameters, timeStamp
#
#	log [n=1]:
#		reportAndLogStatus
#
#	output [n=1]:
#		printOutputFileListAndReadme
#
#	specific [n=1]:
#		convertBamToCTSS
#
#	time [n=1]:
#		timeStamp
#
#	unassigned [n=11]:
#		checkAllExecutable, checkChromNameSizeGenomeFastaPath, checkChunkResults
#		generateChromNameConversionHsh, generateChunkInfoHsh, generateChunkSize
#		getCTSS, getChunkFasta, pileupCtss
#		poolChunkResults, processPerChunk
#
#====================================================================================================================================================#

sub checkAllExecutable {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|141
#	secondaryAppearInSection: >none
#	input: none
#	output: $bedGraphToBigWig_bin, $bedtools_bin, $bgzip_bin, $bigWigAverageOverBed_bin, $cut_sh_path, $paraclu_bin, $samtools_bin, $tabix_bin
#	toCall: my ($tabix_bin, $bgzip_bin, $bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin) = &checkAllExecutable();
#	calledInLine: 156
#....................................................................................................................................................#
	
	my $dirPath = dirname(rel2abs($0));

	my $tabix_bin = "$dirPath/../resources/bin/tabix/tabix";
	my $bgzip_bin = "$dirPath/../resources/bin/bgzip/bgzip";
	my $bedtools_bin = "$dirPath/../resources/bin/bedtools/bedtools";
	my $samtools_bin = "$dirPath/../resources/bin/samtools/samtools";
	my $paraclu_bin = "$dirPath/../resources/bin/paraclu/paraclu";
	my $cut_sh_path = "$dirPath/../resources/bin/paraclu/paraclu-cut.sh";
	my $bedGraphToBigWig_bin = "$dirPath/../resources/bin/bedGraphToBigWig/bedGraphToBigWig";
	my $bigWigAverageOverBed_bin = "$dirPath/../resources/bin/bigWigAverageOverBed/bigWigAverageOverBed";
	
	&reportAndLogStatus("Checking all SCAFE executables", 10, "\n");#->1313
	
	{
		my $stdOut = `$tabix_bin  --version 2>&1`;
		if ($stdOut =~ m/tabix \(htslib\) (\S+)/) {
			&reportAndLogStatus("Checking: tabix version: $1", 0, "\n");#->1313
		} else {
			die "tabix is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bgzip_bin --version 2>&1`;
		if ($stdOut =~ m/bgzip \(htslib\) (\S+)/) {
			&reportAndLogStatus("Checking: bgzip version: $1", 0, "\n");#->1313
		} else {
			die "bgzip is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bedtools_bin --version 2>&1`;
		if ($stdOut =~ m/bedtools v(\S+)/) {
			&reportAndLogStatus("Checking: bedtools version: $1", 0, "\n");#->1313
		} else {
			die "bedtools is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$samtools_bin 2>&1`;
		if ($stdOut =~ m/\s+(Version: \S+)\s+/) {
			&reportAndLogStatus("Checking: samtools version: $1", 0, "\n");#->1313
		} else {
			die "samtools is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$paraclu_bin 2>&1`;
		if ($stdOut =~ m/paraclu: I need a minValue and a fileName/) {
			&reportAndLogStatus("Checking: paraclu found.", 0, "\n");#->1313
		} else {
			die "paraclu is not installed properly. Quitting.\n";
		}
	}
	
	{
		my $stdOut = `$cut_sh_path 55C7128A 2>&1`;
		if ($stdOut =~ m/awk:/) {
			&reportAndLogStatus("Checking: paraclu-cut found.", 0, "\n");#->1313
		} else {
			die "paraclu-cut is not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bedGraphToBigWig_bin 2>&1`;
		if ($stdOut =~ m/bedGraphToBigWig v (\S+)/) {
			&reportAndLogStatus("Checking: bedGraphToBigWig version: $1", 0, "\n");#->1313
		} else {
			die "bedGraphToBigWig not installed properly. Quitting.\n";
		}
	}

	{
		my $stdOut = `$bigWigAverageOverBed_bin 2>&1`;
		if ($stdOut =~ m/bigWigAverageOverBed v(\S+)/) {
			&reportAndLogStatus("Checking: bigWigAverageOverBed version: $1", 0, "\n");#->1313
		} else {
			die "bigWigAverageOverBed is not installed properly. Quitting.\n";
		}
	}

	return ($tabix_bin, $bgzip_bin, $bedtools_bin, $samtools_bin, $paraclu_bin, $cut_sh_path, $bedGraphToBigWig_bin, $bigWigAverageOverBed_bin);
}
sub checkChromNameSizeGenomeFastaPath {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|141
#	secondaryAppearInSection: >none
#	input: $genome
#	output: $chrom_name_path, $chrom_size_path, $genome_fasta_path
#	toCall: my ($chrom_name_path, $chrom_size_path, $genome_fasta_path) = &checkChromNameSizeGenomeFastaPath($genome);
#	calledInLine: 157
#....................................................................................................................................................#
	my ($genome) = @_;
	
	my $dirPath = dirname(rel2abs($0));
	my $chrom_name_path = "$dirPath/../resources/genome/$genome/tsv/chrom.bam_name.tsv";
	my $chrom_size_path = "$dirPath/../resources/genome/$genome/tsv/chrom.sizes.tsv";
	my $genome_fasta_path = "$dirPath/../resources/genome/$genome/fasta/genome.fa";
	die "genome $genome does not have chrom_name_path. Please rerun prep_genome step\n" if not -s $chrom_name_path;
	die "genome $genome does not have chrom_size_path. Please rerun prep_genome step\n" if not -s $chrom_size_path;
	die "genome $genome does not have genome_fasta_path. Please rerun prep_genome step\n" if not -s $genome_fasta_path;
	
	return ($chrom_name_path, $chrom_size_path, $genome_fasta_path);
}
sub checkChunkResults {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: poolChunkResults|896, processPerChunk|1168
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 3_convert|162
#	input: $chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref
#	output: $valid
#	toCall: my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);
#	calledInLine: 928, 1206
#....................................................................................................................................................#
	my ($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref) = @_;
	
	my $valid = 'yes';
	foreach my $file_to_check (@{$file_check_ary_ref}) {
		my $file_path =  $chunk_info_hsh_ref->{$chunk_num}{$file_to_check};
		#&reportAndLogStatus("$file_path", 10, "\n");#->1313
		$valid = 'no' if not -f $file_path;
	}
	
	return ($valid);
}
sub convertBamToCTSS {
#....................................................................................................................................................#
#	subroutineCategory: specific
#	dependOnSub: getCTSS|635, reportAndLogStatus|1313
#	appearInSub: processPerChunk|1168
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 3_convert|162
#	input: $bamPath, $bedtools_bin, $chrom_name_size_hsh_ref, $chunk_endPos, $chunk_fasta_offset_pos, $chunk_fasta_path, $chunk_log_path, $chunk_long_ctss_bed_path, $chunk_sanity_check_path, $chunk_seq_str, $chunk_startPos, $chunk_unsort_long_ctss_bed_path, $exclude_flag, $include_flag, $max_non_G_mismatch, $min_MAPQ, $min_match_length, $region_str, $samtools_bin, $sanity_check_toggle
#	output: 
#	toCall: &convertBamToCTSS($bamPath, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $bedtools_bin, $samtools_bin, $min_MAPQ, $chunk_long_ctss_bed_path, $chunk_unsort_long_ctss_bed_path, $region_str, $chunk_log_path, $chunk_startPos, $chunk_endPos, $chunk_fasta_path, $chunk_seq_str, $chunk_fasta_offset_pos, $chunk_sanity_check_path, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch);
#	calledInLine: 1226
#....................................................................................................................................................#
	my ($bamPath, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $bedtools_bin, $samtools_bin, $min_MAPQ, $chunk_long_ctss_bed_path, $chunk_unsort_long_ctss_bed_path, $region_str, $chunk_log_path, $chunk_startPos, $chunk_endPos, $chunk_fasta_path, $chunk_seq_str, $chunk_fasta_offset_pos, $chunk_sanity_check_path, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch) = @_;
	
	my $force_rerun = 'yes';
	if (not -s $chunk_long_ctss_bed_path or $force_rerun eq 'yes') {
		#&reportAndLogStatus("converting $paramTag bam to ctss bed", 10, "\n");#->1313
		my $perl_covert_readname = 'while (<STDIN>) {chomp; if ($_ =~ m/^\@/) {print "$_\n";} else {@samAry = split /\t/; $samAry[0] = $samAry[9]; $left_seq = substr $samAry[0], 0, 50; $right_seq = substr $samAry[0], -50, 50; $samAry[0] = join "|" ,($left_seq, $right_seq); print join "", (join "\t", @samAry[0..10]), "\n";}}';
		my $min_softclip_length = 0;
		my $max_softclip_length = 3;

		my $min_total_match = 30;
		my $margin = 20;
		my $num_proc = 0;
		my $ex_F_param = '';
		my $in_f_param = '';
		if (defined $exclude_flag) {
			my @flagAry = ();
			foreach my $flag (split /,/, $exclude_flag) {
				push @flagAry, "-F $flag";
			}
			$ex_F_param = join " ", @flagAry;
		}

		if (defined $include_flag) {
			my @flagAry = ();
			foreach my $flag (split /,/, $include_flag) {
				push @flagAry, "-f $flag";
			}
			$in_f_param = join " ", @flagAry;
		}

		#---[6/18/15 14:23] get all
		#my $cmd = "$samtools_bin view -h $in_f_param $ex_F_param $bamPath $region_str 2>/dev/null | perl -e \'$perl_covert_readname\' | $samtools_bin view -b - | $bedtools_bin bamtobed -cigar -i stdin |";
		#print $cmd."\n";
		#print "$samtools_bin view -h $in_f_param $ex_F_param $bamPath $region_str 2>/dev/null | perl -e \'$perl_covert_readname\' | $samtools_bin view -b - | $bedtools_bin bamtobed -cigar -i stdin |\n";
		open (BAMIN, "$samtools_bin view -h $in_f_param $ex_F_param $bamPath $region_str 2>/dev/null | perl -e \'$perl_covert_readname\' | $samtools_bin view -b - | $bedtools_bin bamtobed -cigar -i stdin |");
		#open (CTSSOUT, "| sort -k1,1 -k2,2n -k6,6 >$chunk_long_ctss_bed_path");
		open (CTSSOUT, ">", $chunk_unsort_long_ctss_bed_path);
		open SANITYCHECK, ">", $chunk_sanity_check_path;
		print SANITYCHECK join "", (join "\t", ('out_chrom', 'bedStart', 'bedEnd', 'strand', 'rd_seq', 'check_read_seq', 'check_genome_seq', 'cigar', 'softclip_length', 'match_length', 'check_read_pos', 'trim_length', 'num_unencoded_G', 'non_G_mismatch')), "\n";
		my $chunk_total_read_num = 0;
		my $chunk_passed_read_num = 0;

		while (my $line = <BAMIN>) {
			chomp $line;
			my ($chrom, $bedStart, $bedEnd, $bam_seq, $MAPQ, $strand, $cigar) = split /\t+/, $line;
			$chunk_total_read_num++;

			my $total_match = 0;
			$total_match = sum($cigar =~ m/(\d+)M/g) if $cigar =~ /\d+M/;
			
			next if $MAPQ < $min_MAPQ;
			next if $total_match < $min_total_match;
			my ($left_seq, $right_seq) = split /\|/, $bam_seq;
			if ($strand eq '+') {
				$bam_seq = $left_seq;
			} elsif ($strand eq '-') {
				$bam_seq = $right_seq;
			} else {
				die "bam strand error\n";
			}
			$bam_seq =~ s/\/\d$//;
			my $out_chrom = $chrom_name_size_hsh_ref->{$chrom}{'out_chrom'};
			my $size = $chrom_name_size_hsh_ref->{$chrom}{'size'};
			
			#&reportAndLogStatus("passed_read_num = $passed_read_num", 10, "\n") if ($passed_read_num%10000 == 0);#->1313
			my ($end5Start, $unencoded_G, $sanity_check_ary_ref) = &getCTSS($bedStart, $bedEnd, $strand, $bam_seq, $chunk_startPos, $chunk_endPos, $chunk_seq_str, $chunk_fasta_offset_pos, $samtools_bin, $out_chrom, $cigar, $min_softclip_length, $max_softclip_length, $min_match_length);#->635
			
			if (defined $end5Start) {
				my $end5End = $end5Start+1;
				if ($end5Start >= $chunk_startPos and $end5End <= $chunk_endPos) {
					if ($end5Start >= $margin and $end5End <= ($size - $margin)) {
						$chunk_passed_read_num++;
						print CTSSOUT join "", (join "\t", ($out_chrom, $end5Start, $end5End, $MAPQ, $unencoded_G, $strand)), "\n";
						if ($sanity_check_toggle eq 'yes') {
							print SANITYCHECK join "", (join "\t", (@{$sanity_check_ary_ref})), "\n";
						}
					}
				}
			}
		}
	
		open (LOG, ">$chunk_log_path");
		print LOG "$chunk_passed_read_num\t$chunk_total_read_num\n";
		close LOG;
	
		close BAMIN;
		close CTSSOUT;
		close SANITYCHECK;

		system "sort -k1,1 -k2,2n -k6,6 $chunk_unsort_long_ctss_bed_path >$chunk_long_ctss_bed_path";
		system "rm $chunk_unsort_long_ctss_bed_path";
		
	} else {
		&reportAndLogStatus("chunk_long_ctss_bed_path found. Skipping conversion.", 10, "\n");#->1313
	}

	return ();
}
sub currentTime {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: printStartOrFinishMessage|1134, reportAndLogStatus|1313
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|141, 4_finishingTasks|174
#	input: none
#	output: $runTime
#	toCall: my ($runTime) = &currentTime();
#	calledInLine: 108, 1150, 1154, 1159, 1163, 1329, 1330
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $runTime = sprintf "%04d-%02d-%02d %02d:%02d", $year+1900, $mon+1,$mday,$hour,$min;	
	
	return $runTime;
}
sub generateChromNameConversionHsh {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: >none
#	primaryAppearInSection: 3_convert|162
#	secondaryAppearInSection: >none
#	input: $bamPath, $chrom_name_path, $chrom_size_path, $samtools_bin
#	output: $chrom_name_size_hsh_ref, $out_chrom_size_hsh_ref
#	toCall: my ($chrom_name_size_hsh_ref, $out_chrom_size_hsh_ref) = &generateChromNameConversionHsh($chrom_name_path, $chrom_size_path, $samtools_bin, $bamPath);
#	calledInLine: 165
#....................................................................................................................................................#
	
	my ($chrom_name_path, $chrom_size_path, $samtools_bin, $bamPath) = @_;

	my $min_hit_read_pct = 10;
	&reportAndLogStatus("getting bam header chromosome", 10, "\n");#->1313
	my $actual_bam_chrom_name_hsh_ref = {};
	my $total_num_read = 0;
	open SAMTOOLS, "$samtools_bin idxstats $bamPath|";
	while (<SAMTOOLS>) {
		chomp;
		my ($actual_bam_chrom_name, $size, $num_read) = split /\t/;
		if ($actual_bam_chrom_name ne "*") {
			$actual_bam_chrom_name_hsh_ref->{$actual_bam_chrom_name} = $num_read;
			$total_num_read+=$num_read;
			&reportAndLogStatus("chrom $actual_bam_chrom_name found in bam with size $size and num_read $num_read", 10, "\n");#->1313
		}
	}
	close SAMTOOLS;

	my $chrom_name_size_hsh_ref = {};
	my $tmp_chrom_hsh_ref = {};
	my $out_chrom_size_hsh_ref = {};
	my $hit_num_read = 0;
	open (CHROMNAME, "<", $chrom_name_path);
	while (<CHROMNAME>) {
		chomp;
		my ($out_chrom, $bam_chrom_name) = split /\s+/;
		
		if (exists $actual_bam_chrom_name_hsh_ref->{$out_chrom}) {
			$bam_chrom_name = $out_chrom;
			$hit_num_read += $actual_bam_chrom_name_hsh_ref->{$out_chrom};
		} elsif (exists $actual_bam_chrom_name_hsh_ref->{$bam_chrom_name}) {
			$hit_num_read += $actual_bam_chrom_name_hsh_ref->{$bam_chrom_name};
		}
		
		$chrom_name_size_hsh_ref->{$bam_chrom_name}{'out_chrom'} = $out_chrom;
		$tmp_chrom_hsh_ref->{$out_chrom} = $bam_chrom_name;
	}
	close CHROMNAME;

	my $hit_read_pct = 100*($hit_num_read/$total_num_read);
	&reportAndLogStatus("$hit_read_pct % of read in bam is within chrom list scope", 10, "\n");#->1313
	if ($hit_read_pct < $min_hit_read_pct) {
		die "Quitting due to low % of read in bam is within chrom list scope.\n";
	}

	open (CHROMSIZE, "<", $chrom_size_path);
	while (<CHROMSIZE>) {
		chomp;
		my ($out_chrom, $size) = split /\s+/;
		my $bam_chrom_name = $tmp_chrom_hsh_ref->{$out_chrom};
		$chrom_name_size_hsh_ref->{$bam_chrom_name}{'size'} = $size;
		$out_chrom_size_hsh_ref->{$out_chrom} = $size;
	}
	close CHROMSIZE;

	return ($chrom_name_size_hsh_ref, $out_chrom_size_hsh_ref);
}
sub generateChunkInfoHsh {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: >none
#	primaryAppearInSection: 3_convert|162
#	secondaryAppearInSection: >none
#	input: $chrom_name_size_hsh_ref, $chunk_size, $result_tmp_dir
#	output: $chunk_info_hsh_ref
#	toCall: my ($chunk_info_hsh_ref) = &generateChunkInfoHsh($chrom_name_size_hsh_ref, $chunk_size, $result_tmp_dir);
#	calledInLine: 167
#....................................................................................................................................................#
	my ($chrom_name_size_hsh_ref, $chunk_size, $result_tmp_dir) = @_;
	
	my $chunk_num = 1;
	my $chunk_info_hsh_ref = {};
	foreach my $chrom (sort {$chrom_name_size_hsh_ref->{$a}{'out_chrom'} cmp $chrom_name_size_hsh_ref->{$b}{'out_chrom'}} keys %{$chrom_name_size_hsh_ref}) {
		my $size = $chrom_name_size_hsh_ref->{$chrom}{'size'};
		my $out_chrom = $chrom_name_size_hsh_ref->{$chrom}{'out_chrom'};
		foreach (my $startPos = 0; $startPos <= $size; $startPos += $chunk_size) {
			my $endPos = $startPos + $chunk_size;
			$endPos = $size if ($endPos > $size);
			my $file_tag = "$out_chrom.$startPos.$endPos";
			
			my $size_in_chunk = $endPos - $startPos;
			&reportAndLogStatus("chunk $chunk_num contains $size_in_chunk nt covering $out_chrom $startPos to $endPos", 10, "\n");#->1313

			my $chunk_unsort_long_ctss_bed_path = "$result_tmp_dir/$file_tag.unsorted.long.ctss.bed";
			my $chunk_long_ctss_bed_path = "$result_tmp_dir/$file_tag.long.ctss.bed";
			my $chunk_collapse_ctss_bed_path = "$result_tmp_dir/$file_tag.collapse.ctss.bed";
			my $chunk_ung_collapse_ctss_bed_path = "$result_tmp_dir/$file_tag.unencoded_G.collapse.ctss.bed";
			my $chunk_log_path = "$result_tmp_dir/$file_tag.log.txt";
			my $chunk_fasta_path = "$result_tmp_dir/$file_tag.seq.fasta";
			my $chunk_sanity_check_path = "$result_tmp_dir/$file_tag.unencoded_G.sanity_check.txt";

			my ($chunk_chrom, $chunk_startPos, $chunk_endPos) = ($chrom, $startPos, $endPos);
			$chunk_info_hsh_ref->{$chunk_num}{'loc'} = [$chunk_chrom, $chunk_startPos, $chunk_endPos];
			$chunk_info_hsh_ref->{$chunk_num}{'region_str'} = "$chunk_chrom:$chunk_startPos-$chunk_endPos";
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_unsort_long_ctss_bed_path'} = $chunk_unsort_long_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'} = $chunk_long_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'} = $chunk_collapse_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'} = $chunk_ung_collapse_ctss_bed_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_log_path'} = $chunk_log_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_sanity_check_path'} = $chunk_sanity_check_path;
			$chunk_info_hsh_ref->{$chunk_num}{'chunk_fasta_path'} = $chunk_fasta_path;
			$chunk_num++;
		}
 	}

	return ($chunk_info_hsh_ref);
}
sub generateChunkSize {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 3_convert|162
#	secondaryAppearInSection: >none
#	input: $num_chunk, $out_chrom_size_hsh_ref
#	output: $chunk_size
#	toCall: my ($chunk_size) = &generateChunkSize($out_chrom_size_hsh_ref, $num_chunk);
#	calledInLine: 166
#....................................................................................................................................................#
	
	my ($out_chrom_size_hsh_ref, $num_chunk) = @_;
	
	my $total_size = 0;

	foreach my $out_chrom (keys %{$out_chrom_size_hsh_ref}) {
		$total_size += $out_chrom_size_hsh_ref->{$out_chrom};
	}
	
	my $chunk_size = int ($total_size/$num_chunk);

	return ($chunk_size);
}
sub getCTSS {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: convertBamToCTSS|361
#	primaryAppearInSection: >none
#	secondaryAppearInSection: >none
#	input: $bam_seq, $bedEnd, $bedStart, $chunk_endPos, $chunk_fasta_offset_pos, $chunk_seq_str, $chunk_startPos, $cigar, $max_softclip_length, $min_match_length, $min_softclip_length, $out_chrom, $samtools_bin, $strand
#	output: $end5Start, $num_unencoded_G, $sanity_check_ary_ref
#	toCall: my ($end5Start, $num_unencoded_G, $sanity_check_ary_ref) = &getCTSS($bedStart, $bedEnd, $strand, $bam_seq, $chunk_startPos, $chunk_endPos, $chunk_seq_str, $chunk_fasta_offset_pos, $samtools_bin, $out_chrom, $cigar, $min_softclip_length, $max_softclip_length, $min_match_length);
#	calledInLine: 437
#....................................................................................................................................................#
	my ($bedStart, $bedEnd, $strand, $bam_seq, $chunk_startPos, $chunk_endPos, $chunk_seq_str, $chunk_fasta_offset_pos, $samtools_bin, $out_chrom, $cigar, $min_softclip_length, $max_softclip_length, $min_match_length) = @_;
	
	my ($end5Start, $num_unencoded_G);
	my $sanity_check_ary_ref = [];
	my $num_nt_extract_check = 10;
	my $max_non_G_mismatch = 3;
	
	my ($readStart, $readEnd) = ($bedStart, $bedEnd);

	my $rd_seq = $bam_seq;

	my $softclip_valid = 'no';
	my $match_valid = 'no';
	my $TSS_within_chunk = 'no';
	my $softclip_length = 0;
	my $match_length = 0;

	if ($strand eq '+') {
		$TSS_within_chunk = 'yes' if $readStart >= $chunk_startPos;
		if ($cigar =~ m/^(\d+)S(\d+)M/) {
			$softclip_length = $1;
			$match_length = $2;
			$readStart -= $softclip_length;
		} elsif ($cigar =~ m/(\d+)M$/) {
			$match_length = $1;
		}
	} else {
		$rd_seq = reverse $rd_seq;
		$rd_seq =~ tr/ATGCatgc/TACGtacg/;
		$TSS_within_chunk = 'yes' if $readEnd <= $chunk_endPos;
		if ($cigar =~ m/(\d+)M(\d+)S$/) {
			$softclip_length = $2;
			$match_length = $1;
			$readEnd += $softclip_length;
		} elsif ($cigar =~ m/(\d+)M$/) {
			$match_length = $1;
		}
	}
	
	$softclip_valid = 'yes' if ($softclip_length >= $min_softclip_length and $softclip_length <= $max_softclip_length);
	$match_valid = 'yes' if ($match_length >= $min_match_length);

	if ($softclip_valid eq 'yes' and $match_valid eq 'yes' and $TSS_within_chunk eq 'yes') {
		
		#---take 10nt for checking
		my $check_genome_seq;
		my $check_genome_pos_start;
		if ($strand eq '+') {

			$check_genome_pos_start = $readStart - $chunk_fasta_offset_pos + 1;
			$check_genome_seq = substr ($chunk_seq_str, $check_genome_pos_start, $num_nt_extract_check);

		} else {
			my $check_genome_pos_end = $readEnd - $chunk_fasta_offset_pos;
			$check_genome_pos_start = $check_genome_pos_end - $num_nt_extract_check + 1;

			$check_genome_seq = substr ($chunk_seq_str, $check_genome_pos_start, $num_nt_extract_check);
			$check_genome_seq = reverse($check_genome_seq);
			$check_genome_seq =~ tr/ATGC/TACG/;
		}
		my $check_read_pos = 0;
		my $check_read_seq = substr $rd_seq, $check_read_pos, $num_nt_extract_check;
		my $trim_length = 0;

		$num_unencoded_G = 0;
		my $matched = 'no';
		my $non_G_mismatch = 0;
		foreach my $shift_pos (0..$num_nt_extract_check) {
			my $read_nt = substr($check_read_seq, $shift_pos, 1);
			my $genome_nt = substr($check_genome_seq, $shift_pos, 1);
			if ($read_nt ne $genome_nt) {
				if ($read_nt eq 'G') {
					$num_unencoded_G++;
				} else {
					$non_G_mismatch++;
				};
				$trim_length++;
				last if $non_G_mismatch > $max_non_G_mismatch;
			} else {
				$matched = 'yes';
				last;
			}
		}
		
		if ($matched eq 'yes') {
			$sanity_check_ary_ref = [$out_chrom, $bedStart, $bedEnd, $strand, $rd_seq, $check_read_seq, $check_genome_seq, $cigar, $softclip_length, $match_length, $check_read_pos, $trim_length, $num_unencoded_G, $non_G_mismatch];
			if ($strand eq '+') {
				$end5Start = $readStart + $trim_length;

			} elsif ($strand eq '-') {
				$end5Start = $readEnd - $trim_length - 1;
	
			} else {
				die "strand=$strand, must be + or -\n";
			}
	
			$end5Start = 0 if $end5Start < 0;
		} else {
			#&reportAndLogStatus("$check_genome_seq $check_read_seq $non_G_mismatch $num_unencoded_G", 10, "\n");#->1313
		}
	} else {
		#&reportAndLogStatus("softclip_length=$softclip_length match_length=$match_length cigar=$cigar", 10, "\n");#->1313
	}
	
	return ($end5Start, $num_unencoded_G, $sanity_check_ary_ref);
}
sub getChunkFasta {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: processPerChunk|1168
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 3_convert|162
#	input: $chunk_endPos, $chunk_fasta_path, $chunk_startPos, $genome_fasta_path, $out_chrom, $samtools_bin, $size
#	output: $chunk_fasta_offset_pos, $chunk_seq_str
#	toCall: my ($chunk_seq_str, $chunk_fasta_offset_pos) = &getChunkFasta($chunk_fasta_path, $out_chrom, $chunk_startPos, $chunk_endPos, $genome_fasta_path, $size, $samtools_bin);
#	calledInLine: 1225
#....................................................................................................................................................#
	my ($chunk_fasta_path, $out_chrom, $chunk_startPos, $chunk_endPos, $genome_fasta_path, $size, $samtools_bin) = @_;
	
	&reportAndLogStatus("Extracting chunk fasta", 10, "\n");#->1313
	
	my $fasta_start_pos = $chunk_startPos - 500;
	$fasta_start_pos = 1 if $fasta_start_pos < 1;
	
	my $fasta_end_pos = $chunk_endPos + 500;
	$fasta_end_pos = $size if $fasta_end_pos > $size;

	my $chunk_fasta_name = "$out_chrom:$fasta_start_pos-$fasta_end_pos";
	system ("$samtools_bin faidx $genome_fasta_path $chunk_fasta_name >$chunk_fasta_path");
	my $chunk_seq_str = '';
	
	open CHUNKFASTA, "<", $chunk_fasta_path;
	<CHUNKFASTA>;
	while (<CHUNKFASTA>) {
		chomp;
		$chunk_seq_str = $chunk_seq_str.$_;
	}
	close CHUNKFASTA;
	$chunk_seq_str = uc $chunk_seq_str;
	my $chunk_fasta_offset_pos = $fasta_start_pos;

	return ($chunk_seq_str, $chunk_fasta_offset_pos);
}
sub logCalledCMDAndScript {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|141
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $result_script_dir, $scriptAbsPath
#	output: 
#	toCall: &logCalledCMDAndScript($ARGVStr, $result_script_dir, $scriptAbsPath);
#	calledInLine: 154
#....................................................................................................................................................#
	my ($ARGVStr, $result_script_dir, $scriptAbsPath) = @_;


	my $cpScriptPath = "$result_script_dir/script.ran.pl";
	my $calledCMDPath = "$result_script_dir/called.cmd.txt";
	system "cp -f $scriptAbsPath $cpScriptPath";
	system "chmod 0444 $cpScriptPath"; #---[07/03/2014 18:02] make it read-only to make sure there'll be accodental change of parameters
	open CALLEDCMD, ">", $calledCMDPath;
	print CALLEDCMD join "", ($ARGVStr), "\n";
	close CALLEDCMD;
	
	return ();
}
sub pileupCtss {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: reportAndLogStatus|1313
#	appearInSub: processPerChunk|1168
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 3_convert|162
#	input: $chunk_collapse_ctss_bed_path, $chunk_long_ctss_bed_path, $chunk_num, $chunk_ung_collapse_ctss_bed_path
#	output: 
#	toCall: &pileupCtss($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num);
#	calledInLine: 1227
#....................................................................................................................................................#
	my ($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num) = @_;

	my $num_proc = 0;
	my $tmp_CTSS_hsh_ref = {};
	my $last_chrom = 'initial';
	my $last_start = 'initial';
	my $last_strand = 'initial';
	open INCTSS, "<", $chunk_long_ctss_bed_path;
	open OUTCBCOLLAPSECTSS, ">", $chunk_collapse_ctss_bed_path;
	open UNGOUTCBCOLLAPSECTSS, ">", $chunk_ung_collapse_ctss_bed_path;
	while (<INCTSS>) {
		chomp;
		my ($chrom, $start, $end, $MAPQ, $num_unencoded_G, $strand) = split /\t/;

		$tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'all'}++;
		$tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'}++ if $num_unencoded_G > 0;
	
		if ($last_chrom eq 'initial') {
			$last_chrom = $chrom;
			$last_start = $start;
			$last_strand = $strand;
		}

		if (($chrom ne $last_chrom or $start ne $last_start or $strand ne $last_strand)) {
			my $last_end = $last_start + 1;

			my $num_total_ctss = $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'all'};
			print OUTCBCOLLAPSECTSS join "", (join "\t", ($last_chrom, $last_start, $last_end, $num_total_ctss, $num_total_ctss, $last_strand)), "\n";

			if (exists $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'ung'}) {
				my $num_ung_ctss = $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand}{'ung'};
				print UNGOUTCBCOLLAPSECTSS join "", (join "\t", ($last_chrom, $last_start, $last_end, $num_total_ctss, $num_ung_ctss, $last_strand)), "\n";
			}

			delete $tmp_CTSS_hsh_ref->{$last_chrom}{$last_start}{$last_strand};
			$last_chrom = $chrom;
			$last_start = $start;
			$last_strand = $strand;
			$num_proc++;
			if ($num_proc%10000 == 0) {
				&reportAndLogStatus("$num_proc CTSS piled up for chunk $chunk_num", 10, "\n");#->1313
			}
		}
	
		if (eof(INCTSS)) {
			foreach my $chrom (keys %{$tmp_CTSS_hsh_ref}) {
				foreach my $start (keys %{$tmp_CTSS_hsh_ref->{$chrom}}) {
					my $end = $start + 1;
					foreach my $strand (keys %{$tmp_CTSS_hsh_ref->{$chrom}{$start}}) {

						my $num_total_ctss = $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'all'};
						print OUTCBCOLLAPSECTSS join "", (join "\t", ($chrom, $start, $end, $num_total_ctss, $num_total_ctss, $strand)), "\n";

						if (exists $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'}) {
							my $num_ung_ctss = $tmp_CTSS_hsh_ref->{$chrom}{$start}{$strand}{'ung'};
							print UNGOUTCBCOLLAPSECTSS join "", (join "\t", ($chrom, $start, $end, $num_total_ctss, $num_ung_ctss, $strand)), "\n";
						}
					}
				}
			}
		}
	}
	close INCTSS;
	close OUTCBCOLLAPSECTSS;
	close UNGOUTCBCOLLAPSECTSS;

	return ();
}
sub poolChunkResults {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: checkChunkResults|338, reportAndLogStatus|1313
#	appearInSub: >none
#	primaryAppearInSection: 3_convert|162
#	secondaryAppearInSection: >none
#	input: $bgzip_bin, $chunk_info_hsh_ref, $max_thread, $paramTag, $result_bed_dir, $result_log_dir, $result_tmp_dir, $rm_tmp_file, $tabix_bin
#	output: 
#	toCall: &poolChunkResults($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $max_thread, $tabix_bin, $bgzip_bin, $result_tmp_dir, $rm_tmp_file);
#	calledInLine: 169
#....................................................................................................................................................#
	my ($chunk_info_hsh_ref, $result_bed_dir, $result_log_dir, $paramTag, $max_thread, $tabix_bin, $bgzip_bin, $result_tmp_dir, $rm_tmp_file) = @_;
	
	my $ung_collapse_ctss_bed_path = "$result_bed_dir/$paramTag.unencoded_G.collapse.ctss.bed";
	my $collapse_ctss_bed_path = "$result_bed_dir/$paramTag.collapse.ctss.bed";
	my $long_ctss_bed_path = "$result_bed_dir/$paramTag.long.ctss.bed";
	my $log_path = "$result_log_dir/$paramTag.read_count.txt";
	my $sanity_check_path = "$result_tmp_dir/$paramTag.unencoded_G.sanity_check.txt";
	
	open SANITYCHECK, ">", $sanity_check_path;
	print SANITYCHECK join "", (join "\t", ('out_chrom', 'bedStart', 'bedEnd', 'strand', 'rd_seq', 'check_read_seq', 'check_genome_seq', 'cigar', 'softclip_length', 'match_length', 'check_read_pos', 'trim_length', 'num_unencoded_G', 'non_G_mismatch')), "\n";

	my $total_read_num = 0;
	my $passed_read_num = 0;
	my $num_sanity_print = 1000;
	
	open LONGCTSS, ">$long_ctss_bed_path";
	open COLLAPSECTSS, ">$collapse_ctss_bed_path";
	open UNGCOLLAPSECTSS, ">$ung_collapse_ctss_bed_path";
	
	foreach my $chunk_num (sort {$a <=> $b} keys %{$chunk_info_hsh_ref}) {
		my $file_check_ary_ref = [qw/chunk_long_ctss_bed_path chunk_collapse_ctss_bed_path/];
		my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);#->338

		if ($valid eq 'yes') {
			&reportAndLogStatus("results of chunk $chunk_num is found. start parsing.", 10, "\n");#->1313
			my $chunk_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'};
			my $chunk_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'};
			my $chunk_ung_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'};
			my $chunk_log_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_log_path'};
			my $chunk_sanity_check_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_sanity_check_path'};
			my $chunk_fasta_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_fasta_path'};
			
			my $num_sanity_check = 0;
			open (CHUNKSANITYCHECK, "<", $chunk_sanity_check_path);
			<CHUNKSANITYCHECK>;
			while (<CHUNKSANITYCHECK>) {
				print SANITYCHECK $_;
				$num_sanity_check++;
				last if $num_sanity_check >= $num_sanity_print;
			}
			close CHUNKSANITYCHECK;

			open (CHUNKLONG, "<", $chunk_long_ctss_bed_path);
			while (<CHUNKLONG>) {
				print LONGCTSS $_;
			}
			close CHUNKLONG;

			open (UNGCHUNKCOLLAPSE, "<", $chunk_ung_collapse_ctss_bed_path);
			while (<UNGCHUNKCOLLAPSE>) {
				print UNGCOLLAPSECTSS $_;
			}
			close UNGCHUNKCOLLAPSE;

			open (CHUNKCOLLAPSE, "<", $chunk_collapse_ctss_bed_path);
			while (<CHUNKCOLLAPSE>) {
				print COLLAPSECTSS $_;
			}
			close CHUNKCOLLAPSE;
		
			open (CHUNKLOG, "<", $chunk_log_path);
			while (<CHUNKLOG>) {
				chomp;
				my ($chunk_passed_read_num, $chunk_total_read_num) = split /\t/;
				$total_read_num += $chunk_total_read_num;
				$passed_read_num += $chunk_passed_read_num;
			}
			close CHUNKLOG;

			if ($rm_tmp_file eq 'yes') {
				system ("rm $chunk_long_ctss_bed_path");
				system ("rm $chunk_collapse_ctss_bed_path");
				system ("rm $chunk_ung_collapse_ctss_bed_path");
				system ("rm $chunk_log_path");
				system ("rm $chunk_fasta_path");
				system ("rm $chunk_sanity_check_path");
			}
			
		} else {
			die "results of chunk $chunk_num is not found. quitting\n";
		}
		
	}

	my $ctss_hsh_ref = {
		'ung_collapse_ctss_bed_path' => $ung_collapse_ctss_bed_path,
		'collapse_ctss_bed_path' => $collapse_ctss_bed_path,
		'long_ctss_bed_path' => $long_ctss_bed_path,
	};
	
	foreach my $ctss_name (sort keys %{$ctss_hsh_ref}) {
		my $ctss_path = $ctss_hsh_ref->{$ctss_name};
		my $tabix_ctss_path = "$ctss_path.gz";
		&reportAndLogStatus("Compressing $ctss_name.", 10, "\n");#->1313
		system "$bgzip_bin -@ $max_thread -c $ctss_path >$tabix_ctss_path";
		system "rm -f $ctss_path";
		&reportAndLogStatus("Tabix indexing $ctss_name.", 10, "\n");#->1313
		system "$tabix_bin -p bed $tabix_ctss_path";
	}

	open ALLLOG, ">", $log_path;
	print ALLLOG join "", (join "\t", ('total_read_num', 'passed_read_num')), "\n";
	print ALLLOG join "", (join "\t", ($total_read_num, $passed_read_num)), "\n";
	close ALLLOG;
	close SANITYCHECK;
	close COLLAPSECTSS;
	close UNGCOLLAPSECTSS;
	close LONGCTSS;
	
	return ();
}
sub printOutputFileListAndReadme {
#....................................................................................................................................................#
#	subroutineCategory: output
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 4_finishingTasks|174
#	secondaryAppearInSection: >none
#	input: $ARGVStr, $outDir, $paramTag
#	output: 
#	toCall: &printOutputFileListAndReadme($ARGVStr, $paramTag, $outDir);
#	calledInLine: 177
#....................................................................................................................................................#
	my ($ARGVStr, $paramTag, $outDir) = @_;
	
	my $outputFileListPath = "$outDir/$paramTag/output.file.list.txt";
	open (OUTFILELIST, ">", $outputFileListPath);

	my %dirHsh = ();
	my %filelistLenCountHsh = ();
	push @{$filelistLenCountHsh{'dir'}}, length 'Directory';
	push @{$filelistLenCountHsh{'name'}}, length 'Name';
	push @{$filelistLenCountHsh{'description'}}, length 'Description';
	
	foreach my $outputFilePath (sort {$a cmp $b} keys %{$globalReadmeHsh_ref}) {
		my $fileDescription =  $globalReadmeHsh_ref->{$outputFilePath}{'description'};
		my $cleandOutputFilePath = $outputFilePath;
		$cleandOutputFilePath =~ s/\/+/\//g;
		
		my ($filePrefix, $fileDir, $fileSuffix) = fileparse($cleandOutputFilePath, qr/\.[^.]*/);
		$fileDir =~ s/^$outDir//;
		my $fileName = $filePrefix.$fileSuffix;
		$dirHsh{$fileDir}{$fileName} = $fileDescription;
		push @{$filelistLenCountHsh{'dir'}}, length $fileDir;
		push @{$filelistLenCountHsh{'name'}}, length $fileName;
		push @{$filelistLenCountHsh{'description'}}, length $fileDescription;
		
		open README, ">", "$outputFilePath.readme.txt";
		print README "=================\n";
		print README "File descriptions\n";
		print README "=================\n";
		print README "$fileDescription\n";
					
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}) {
			my @colLenCountHsh = (length 'column');
			push @colLenCountHsh, length $_ foreach (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}});
			my $headerColLen = max(@colLenCountHsh)+2;
			print README "\n";
			print README "\n";
			print README "===================\n";
			print README "Column descriptions\n";
			print README "===================\n";
			print README "\n";
			printf README "%-".$headerColLen."s", 'column';
			print README "description\n";
			printf README "%-".$headerColLen."s", '------';
			print README "-----------\n";
			foreach my $header (@{$globalReadmeHsh_ref->{$outputFilePath}{'headerAry'}}) {
				my $columnDescription = 'self-explanatory';
				$columnDescription = $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header} if exists $globalReadmeHsh_ref->{$outputFilePath}{'header'}{$header};
				printf README "%-".$headerColLen."s", $header;
				print README $columnDescription."\n";
			}
		}
		
		if (exists $globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}) {
			print README "\n";
			print README "\n";
			print README "=================\n";
			print README "Extra information\n";
			print README "=================\n";
			print README "\n";
			foreach my $title (sort keys %{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}}) {
				print README "$title\n";
				print README "-" foreach (1..length $title);
				print README "\n";
				print README "$_\n" foreach @{$globalReadmeHsh_ref->{$outputFilePath}{'extra_info'}{$title}};
			}
		}
		
		print README "\n";
		print README "\n";
		print README "~" foreach (1..length "$fileName was created from running,");
		print README "\n";
		print README "$fileName was created from running,\n";
		print README "\n";
		print README "$ARGVStr\n";
		print README "\n";
		close README;
	}

	my $fileDir_colLen = max(@{$filelistLenCountHsh{'dir'}})+2;
	my $fileName_colLen = max(@{$filelistLenCountHsh{'name'}})+2;
	my $fileDescription_colLen = max(@{$filelistLenCountHsh{'description'}})+2;
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", 'directory', 'name', 'description');
	printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", '=========', '====', '===========');
	foreach my $fileDir (sort {$a cmp $b} keys %dirHsh) {
		foreach my $fileName (sort {$a cmp $b} keys %{$dirHsh{$fileDir}}) {
			my $fileDescription = $dirHsh{$fileDir}{$fileName};	
			printf OUTFILELIST ("%-".$fileDir_colLen."s %-".$fileName_colLen."s %-".$fileDescription_colLen."s\n", $fileDir, $fileName, $fileDescription);
		}
	}
	
	print OUTFILELIST "\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "~" foreach (1..length "The above files were generated by running,");
	print OUTFILELIST "\n";
	print OUTFILELIST "The above files were generated by running,\n";
	print OUTFILELIST "\n";
	print OUTFILELIST "$ARGVStr\n";
	print OUTFILELIST "\n";

	close OUTFILELIST;

	return ();
}
sub printStartOrFinishMessage {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: currentTime|471
#	appearInSub: >none
#	primaryAppearInSection: 2_defineOutDirPath|141, 4_finishingTasks|174
#	secondaryAppearInSection: >none
#	input: $StartOrFinishMessage
#	output: none
#	toCall: &printStartOrFinishMessage($StartOrFinishMessage);
#	calledInLine: 155, 178
#....................................................................................................................................................#

	my ($StartOrFinishMessage) = @_;
	
	if ($StartOrFinishMessage eq "startMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] starts running ...... \n";#->471
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] starts running ...... \n";#->471
		print $tmplog_fh "=========================================================================\n\n";

	} elsif ($StartOrFinishMessage eq "finishMessage") {
		print "\n=========================================================================\n";
		print "[".&currentTime()."] finished running .......\n";#->471
		print "=========================================================================\n\n";

		print $tmplog_fh "\n=========================================================================\n";
		print $tmplog_fh "[".&currentTime()."] finished running .......\n";#->471
		print $tmplog_fh "=========================================================================\n\n";
	}
}
sub processPerChunk {
#....................................................................................................................................................#
#	subroutineCategory: unassigned
#	dependOnSub: checkChunkResults|338, convertBamToCTSS|361, getChunkFasta|753, pileupCtss|816, reportAndLogStatus|1313
#	appearInSub: >none
#	primaryAppearInSection: 3_convert|162
#	secondaryAppearInSection: >none
#	input: $bamPath, $bedtools_bin, $chrom_name_size_hsh_ref, $chunk_info_hsh_ref, $exclude_flag, $genome_fasta_path, $include_flag, $max_non_G_mismatch, $max_thread, $min_MAPQ, $min_match_length, $out_chrom_size_hsh_ref, $samtools_bin, $sanity_check_toggle
#	output: 
#	toCall: &processPerChunk($bamPath, $bedtools_bin, $samtools_bin, $max_thread, $chunk_info_hsh_ref, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $min_MAPQ, $genome_fasta_path, $out_chrom_size_hsh_ref, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch);
#	calledInLine: 168
#....................................................................................................................................................#
	my ($bamPath, $bedtools_bin, $samtools_bin, $max_thread, $chunk_info_hsh_ref, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $min_MAPQ, $genome_fasta_path, $out_chrom_size_hsh_ref, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch) = @_;

	my %itemForThrHsh = ();
	my $threadID = 1;
	my $chrom_info_hsh_ref = {};
	my $total_num_chunk = keys %{$chunk_info_hsh_ref};
	foreach my $chunk_num (keys %{$chunk_info_hsh_ref}) {
		$threadID = 1 if $threadID > $max_thread;
		$itemForThrHsh{$threadID}{$chunk_num}++;
		$threadID++;
	}
	my $num_proc : shared = 0;

	my %threadHsh =();
	foreach my $threadID (sort {$a <=> $b} keys %itemForThrHsh) {
		my $itemForThrHsh_ref = $itemForThrHsh{$threadID};
		($threadHsh{$threadID}) = threads->new(#---refer to http://www.perlmonks.org/?node_id=966781, the 
	
			sub {
				
				my ($itemForThrHsh_ref) = @_;
				my $total_chunk = keys %{$itemForThrHsh_ref};
				
				&reportAndLogStatus("$total_chunk chunks spawned to thread $threadID.", 10, "\n");#->1313
				foreach my $chunk_num (keys %{$itemForThrHsh_ref}) {
					
					my $file_check_ary_ref = [qw/chunk_long_ctss_bed_path chunk_collapse_ctss_bed_path/];
					my ($valid) = &checkChunkResults($chunk_info_hsh_ref, $chunk_num, $file_check_ary_ref);#->338

					if ($valid eq 'yes') {
						&reportAndLogStatus("results of chunk $chunk_num is found. skipping", 10, "\n");#->1313

					} else {
						&reportAndLogStatus("start processing chunk $chunk_num in thread $threadID.", 10, "\n");#->1313
						my $region_str = $chunk_info_hsh_ref->{$chunk_num}{'region_str'};
						my $chunk_unsort_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_unsort_long_ctss_bed_path'};
						my $chunk_long_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_long_ctss_bed_path'};
						my $chunk_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_collapse_ctss_bed_path'};
						my $chunk_ung_collapse_ctss_bed_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_ung_collapse_ctss_bed_path'};
						my $chunk_log_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_log_path'};
						my $chunk_sanity_check_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_sanity_check_path'};
						my $chunk_fasta_path = $chunk_info_hsh_ref->{$chunk_num}{'chunk_fasta_path'};
						my ($chunk_chrom, $chunk_startPos, $chunk_endPos) = @{$chunk_info_hsh_ref->{$chunk_num}{'loc'}};
						my $out_chrom = $chrom_name_size_hsh_ref->{$chunk_chrom}{'out_chrom'};
						my $size = $out_chrom_size_hsh_ref->{$out_chrom};
						
						my ($chunk_seq_str, $chunk_fasta_offset_pos) = &getChunkFasta($chunk_fasta_path, $out_chrom, $chunk_startPos, $chunk_endPos, $genome_fasta_path, $size, $samtools_bin);#->753
						&convertBamToCTSS($bamPath, $chrom_name_size_hsh_ref, $exclude_flag, $include_flag, $bedtools_bin, $samtools_bin, $min_MAPQ, $chunk_long_ctss_bed_path, $chunk_unsort_long_ctss_bed_path, $region_str, $chunk_log_path, $chunk_startPos, $chunk_endPos, $chunk_fasta_path, $chunk_seq_str, $chunk_fasta_offset_pos, $chunk_sanity_check_path, $sanity_check_toggle, $min_match_length, $max_non_G_mismatch);#->361
						&pileupCtss($chunk_long_ctss_bed_path, $chunk_collapse_ctss_bed_path, $chunk_ung_collapse_ctss_bed_path, $chunk_num);#->816
					}
					$num_proc++;
					&reportAndLogStatus("$num_proc of $total_num_chunk chunks are finised.", 10, "\n");#->1313
				}
				return ();
			}
			,($itemForThrHsh_ref)
		);
	}
	
	while (keys %threadHsh) {

		my @threads = threads->list();
		my $thread_count = threads->list();
		my @running = threads->list(threads::running);
		my @joinable = threads->list(threads::joinable);
		my $running_count = @running;
		my $joinable_count = @joinable;

		&reportAndLogStatus("$thread_count threads exists. $running_count running and $joinable_count joinable", 10, "\n");#->1313

		foreach my $threadID (keys %threadHsh) {
			if (not $threadHsh{$threadID}->is_running() or $threadHsh{$threadID}->is_joinable() or $threadHsh{$threadID}->is_detached()) {
				&reportAndLogStatus("thread $threadID is finishing.", 10, "\n");#->1313
				$threadHsh{$threadID}->join();
				delete $threadHsh{$threadID};
			}
		}
		sleep 10;
	}

	return ();
}
sub readParameters {
#....................................................................................................................................................#
#	subroutineCategory: general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: 0_startingTasks|119
#	secondaryAppearInSection: >none
#	input: none
#	output: $bamPath, $exclude_flag, $genome, $include_flag, $max_thread, $min_MAPQ, $outDir, $outputPrefix, $overwrite
#	toCall: my ($bamPath, $exclude_flag, $include_flag, $min_MAPQ, $max_thread, $genome, $outputPrefix, $outDir, $overwrite) = &readParameters();
#	calledInLine: 122
#....................................................................................................................................................#
	
	my ($bamPath, $exclude_flag, $include_flag, $min_MAPQ, $max_thread, $genome, $outputPrefix, $outDir, $overwrite);
	
	$min_MAPQ = 0;
	$exclude_flag = '4,8,128,256,512,1024,2048';
	$max_thread = 5;
	$overwrite = 'no';

	GetOptions 	(
		"bamPath=s"				=>	\$bamPath,
		"include_flag=s"		=>	\$include_flag,
		"min_MAPQ:i"			=>	\$min_MAPQ,
		"exclude_flag:s"		=>	\$exclude_flag,
		"max_thread:i"			=>	\$max_thread,
		"genome=s"				=>	\$genome,
		"outputPrefix=s"		=>	\$outputPrefix,
		"outDir:s"				=>	\$outDir,
		"overwrite:s"			=>	\$overwrite,
		'help'					=>	sub { HelpMessage(0) },
	) or HelpMessage(1);

	HelpMessage(1) unless $bamPath;
	
	#---check file
	my $file_check_hsh_ref = {
		'bamPath' => $bamPath,
	};
	
	foreach my $option_name (keys %{$file_check_hsh_ref}) {
		my $file_path = $file_check_hsh_ref->{$option_name};
		die "Quitting: File $option_name does not exists at $file_path" if not -s $file_path;
	}
	
	chop $outDir if ($outDir =~ m/\/$/); #---remove the last slash
	system "mkdir -p -m 755 $outDir/";
	
	return($bamPath, $exclude_flag, $include_flag, $min_MAPQ, $max_thread, $genome, $outputPrefix, $outDir, $overwrite);

}
sub reportAndLogStatus {
#....................................................................................................................................................#
#	subroutineCategory: log
#	dependOnSub: currentTime|471
#	appearInSub: checkAllExecutable|214, checkChunkResults|338, convertBamToCTSS|361, generateChromNameConversionHsh|489, generateChunkInfoHsh|559, getCTSS|635, getChunkFasta|753, pileupCtss|816, poolChunkResults|896, processPerChunk|1168
#	primaryAppearInSection: >none
#	secondaryAppearInSection: 2_defineOutDirPath|141, 3_convert|162
#	input: $lineEnd, $message, $numTrailingSpace
#	output: 
#	toCall: &reportAndLogStatus($message, $numTrailingSpace, $lineEnd);
#	calledInLine: 237, 242, 251, 260, 269, 278, 287, 296, 305, 354, 376, 436, 465, 504, 514, 541, 583, 744, 747, 766, 867, 931, 1000, 1003, 1202, 1209, 1212, 1230, 1247, 1251
#....................................................................................................................................................#
	my ($message, $numTrailingSpace, $lineEnd) = @_;

	my $trailingSpaces = '';
	$trailingSpaces .= " " for (1..$numTrailingSpace);
	
	print "[".&currentTime()."] ".$message.$trailingSpaces.$lineEnd;#->471
	print $tmplog_fh "[".&currentTime()."] ".$message.$lineEnd if $lineEnd ne "\r";#->471
	
	return ();
}
sub timeStamp {
#....................................................................................................................................................#
#	subroutineCategory: time, general
#	dependOnSub: >none
#	appearInSub: >none
#	primaryAppearInSection: >none
#	secondaryAppearInSection: >none
#	input: none
#	output: $curntTimeStamp
#	toCall: my ($curntTimeStamp) = &timeStamp();
#	calledInLine: 107
#....................................................................................................................................................#
	
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
	my $curntTimeStamp = sprintf "%04d.%02d.%02d.%02d.%02d.%02d", $year+1900,$mon+1,$mday,$hour,$min,$sec;	

	return ($curntTimeStamp);
}

exit;


















































